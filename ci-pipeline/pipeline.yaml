apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  labels:
    pipeline.openshift.io/runtime: nodejs
    pipeline.openshift.io/runtime-version: 16-ubi8
    pipeline.openshift.io/type: kubernetes
  name: pacman1-pipeline
spec:
  params:
    ## repository parameters
  - name: GIT_REPO
    type: string
  - name: GIT_REVISION
    default: ""
    type: string
    ## Image build parameters
  - name: PATH_CONTEXT
    default: .
    type: string
  - name: STORAGE_DRIVER
    type: string
  - name: TLSVERIFY
    type: string
 # - name: VERSION
 #   default: 16-ubi8
 #   type: string
    # OpenShift imagestream URL parameters
    #
  - name: IMAGE_NAME 
    type: string
    ## Image validation parameters
  - name: acs_central_endpoint              
    type: string
  - name: acs_api_token                     
    type: string
  - name: roxctl-output-format             
    type: string
    ## Update Argocd application and commit to Github parameters
  - name: repo_type
    type: string
  - name: cd-git-url
    type: string
  - name: cd-git-repo-name
    type: string
  - name: cd-git-repo-path-to-content-development
    type: string
  - name: argocd-application-file
    type: string
  - name: cd-git-user-name
    type: string
  - name: cd-git-user-email
    type: string
  - name: cd-git-commit-comment-dev 
    type: string
  tasks:
##------------------------------------------------------------------
# Fetch source to build
##------------------------------------------------------------------
  - name: fetch-repository
    params:
    - name: url
      value: $(params.GIT_REPO)
    - name: revision
      value: $(params.GIT_REVISION)
    - name: subdirectory
      value: ""
    - name: deleteExisting
      value: "true"
    taskRef:
      kind: ClusterTask
      name: git-clone
    workspaces:
    - name: output
      workspace: workspace
##------------------------------------------------------------------
# Build Node.JS application
##------------------------------------------------------------------
  - name: build
    params:
    - name: TLSVERIFY
      value: "false"
    - name: STORAGE_DRIVER
      value: $(params.STORAGE_DRIVER)
    - name: app-dir
      value: $(params.PATH_CONTEXT)
    runAfter:
    - fetch-repository
    taskRef:
      kind: Task
      name: build
    workspaces:
    - name: resources
      workspace: workspace
    - name: files
      workspace: files
#------------------------------------------------------------------
# Push the new runtime image to OpenShift imagestream
#------------------------------------------------------------------
  - name: push-image-to-imagestream
    params:
    - name: imagestream-url
      value: $(params.IMAGE_NAME)
    - name: STORAGE_DRIVER
      value: $(params.STORAGE_DRIVER)
    - name: TLSVERIFY
      value: "$(params.TLSVERIFY)"
    - name: pipelineRunName
      value: $(context.pipelineRun.name)
    taskRef:
      kind: Task
      name: push-image-to-ocp
    runAfter:
      - build
    workspaces:
    - name: files
      workspace: files
##------------------------------------------------------------------
# Perform image build check
##------------------------------------------------------------------
#  - name: image-build-check
#    params:
#    - name: acs_central_endpoint
#      value: $(params.acs_central_endpoint)
#    - name: acs_api_token
#      value: $(params.acs_api_token)
#    - name: public-url
#      value: $(params.IMAGE_NAME):$(tasks.push-image-to-imagestream.results.new-tag)
#    - name: roxctl-output-format
#      value: $(params.roxctl-output-format)
#    taskRef:
#      kind: Task
#      name: acs-image-build-check
#    runAfter:
#    - push-image-to-imagestream
##------------------------------------------------------------------
# Clone the cd repository and update the argocd application file 
# to refer to the new tagged image.
##------------------------------------------------------------------
  - name: update-and-commit-argocd-project-file
    params:
    - name: GIT_URL
      value: $(params.repo_type)/$(params.cd-git-url)
    - name: GIT_REPO_NAME
      value: $(params.cd-git-repo-name)
    - name: GIT_BRANCH
      value: "main"
    - name: GIT_PATH_TO_CONTENT
      value: $(params.cd-git-repo-path-to-content-development)
    - name: FILENAME
      value: $(params.argocd-application-file)
    - name: GIT_USER_NAME
      value: $(params.cd-git-user-name)
    - name: GIT_USER_EMAIL
      value: $(params.cd-git-user-email)
    - name: GIT_COMMIT_COMMENT
      value: $(params.cd-git-commit-comment-dev)
    - name: IMAGE_TAG
      value: $(tasks.push-image-to-imagestream.results.new-tag)
    - name: LOCATION
      value: "dev"
    taskRef:
      kind: Task
      name: update-and-commit-argocd-app-file
    runAfter:
    #- image-build-check
    - push-image-to-imagestream
    #when:
    #- input: "$(tasks.image-build-check.results.scan-result)"
    #  operator: in
    #  values:
    #  - "pass"
    workspaces:
    - name: files
      workspace: files
  workspaces:
  - name: workspace
  - name: files
